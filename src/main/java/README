/**
 * SDA Scheduler application requirements
 * Requirements
 * Create a class hierarchy
 * Person.java - firstname
 *             - lastname
 *             - dateOfBirth
 * Trainer.java (extends Person) - isAuthorized (boolean)
 * Student.java (extends Person) - hasPreviousJavaKnowledge (boolean)
 * Create a Group class which has
 * name (Java2Gdansk, Tester3Bucharest1, etc)
 * one trainer
 * a list of students
 * Manually initialize 15 students; 4 groups and 3 trainers;
 * Store all students in a list; all groups in a list; all trainers in a list;
 * Asign a trainer to each group
 * Asign 2-3 students to each group
 * Ensure the fact that a group will only have distinct students (How would you do that?)
 * Ensure the fact that a group will only have a maximum of 5 students; When you try to add a 6th one throw an MaximumNumberOfStudentsReached exception
 * Display all students in a group sorted alphabetically by lastName
 * Display the group with the maximum number of students
 * Display all students younger than 25, from all groups
 * Display all students grouped by trainer that teaches to them (eg. Trainer1 - stud1, stud3, stud4; Trainer2 - stud2, stud 10) - regardless of the group they're part of (If you were to store this information in a data structure what would you use?)
 * Display all students with previous java knowledge
 * Display the group with the highest number of students with no previous java knowledge
 * Remove all the students younger than 20 from all groups
 */



 private static void createClass() {
         //Students
         Student student1 = new Student("Diana", "Lenter", LocalDate.of(1989, Month.MAY, 06), true);
         System.out.println(student1);
         Student student2 = new Student("Di", "Lenter", LocalDate.of(1989, Month.MAY, 06), true);
         Student student3 = new Student("Dia", "Lenter", LocalDate.of(1989, Month.MAY, 06), true);
         Student student4 = new Student("Dian", "Lenter", LocalDate.of(1989, Month.MAY, 06), false);
         Student student5 = new Student("Dianna", "Lenter", LocalDate.of(1989, Month.MAY, 06), true);
         Student student6 = new Student("Dianaa", "Lenter", LocalDate.of(1989, Month.MAY, 06), false);
         Student student7 = new Student("Diannaa", "Lenter", LocalDate.of(1989, Month.MAY, 06), true);
         Student student8 = new Student("Diiana", "Lenter", LocalDate.of(1989, Month.MAY, 06), true);
         Student student9 = new Student("Diaana", "Lenter", LocalDate.of(1989, Month.MAY, 06), false);
         Student student10 = new Student("Diaiana", "Lenter", LocalDate.of(1989, Month.MAY, 06), false);

         List<Student> students = Arrays.asList(student1, student2, student3, student4, student5, student6, student7, student8, student9, student10);


         List<Student> studentsRo16 = Arrays.asList(student1, student2, student3);
         List<Student> studentsRo17 = Arrays.asList(student4, student5);
         List<Student> studentsRo18 = Arrays.asList(student4, student5);
         List<Student> studentsRo19 = Arrays.asList(student8, student9, student10);

         Set<Student> students = new HashSet<Student>();
         students.add(student1);
         students.add(student2);
         students.add(student3);
         students.add(student4);
         students.add(student5);
         students.add(student6);
         students.add(student7);
         students.add(student8);
         students.add(student9);
         students.add(student10);

         Set<Student> distinctRo16 = new HashSet<Student>();
         studentsRo17.add(student7);

         //Trainers
         Trainer trainer1 = new Trainer("Di", "Lenter", LocalDate.of(1989, Month.MAY, 06), true);
         Trainer trainer2 = new Trainer("Di", "Lenter", LocalDate.of(1989, Month.MAY, 06), true);
         Trainer trainer3 = new Trainer("Di", "Lenter", LocalDate.of(1989, Month.MAY, 06), true);
         List<Trainer> trainers = Arrays.asList(trainer1, trainer2, trainer3);
         System.out.println(trainer1);

         //Groups
         Set<Student> JavaRo16 = new Group(trainer1, studentsRo16);
         Set<Student> JavaRo17 = new Group(trainer2, studentsRo17);
         Set<Student> JavaRo18 = new Group(trainer3, studentsRo18);
         Set<Student> JavaRo19 = new Group(null, studentsRo19);

         List<Group> groups = Arrays.asList(JavaRo16, JavaRo17, JavaRo18, JavaRo19);
         JavaRo19.setTrainer(trainer3);
     }
 }
